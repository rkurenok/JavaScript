// function check1(str, bracketsConfig) {
//     let stack = [];

//     if (str.length % 2 != 0) {
//         return false;
//     }

//     let checkeven = 1;
//     let cheven;
//     let chClose;

//     for (let i = 0; i < str.length; i++) {
//         let ch = str.charAt(i);
//         let close = false;
//         let open = false;
//         let even = false;

//         for (let j = 0; j < bracketsConfig.length; j++) {
//             if (bracketsConfig[j][0] == bracketsConfig[j][1] && ch == bracketsConfig[j][0]) {
//                 even = true;
//                 checkeven = (-1) * checkeven;
//                 cheven = ch;
//                 //console.log('checkeven = ', checkeven)
//                 break;
//             }
//             if (ch == bracketsConfig[j][0]) {
//                 open = true;
//                 break;
//             }
//             if (ch == bracketsConfig[j][1]) {
//                 close = true;
//                 chClose = bracketsConfig[j][0];
//                 break;
//             }
//         }
//         if (even == true) {
//             if (checkeven == -1) {
//                 stack.push(ch);
//                 //console.log('push=', ch);
//             }
//             if (checkeven == 1 && cheven == stack[stack.length - 1]) {
//                 //console.log(' pop stack[stack.length-1]=', stack[stack.length - 1], ', ch= ', ch)
//                 stack.pop();
//             }
//         } else {

//             if (open === true) {
//                 stack.push(ch);
//                 //console.log('push=', ch);
//             }
//             if (close === true && chClose == stack[stack.length - 1]) {
//                 //console.log(' pop stack[stack.length-1]=', stack[stack.length - 1], ', ch= ', ch)
//                 stack.pop();
//             }
//         }
//     }
//     return (stack.length === 0);
// };

function check(str, bracketsConfig) {
    let chars = str.split(''),
        stack = [],
        open = [],
        close = [],
        closeIndex = 0,
        openIndex = 0;

    for (let j = 0; j < bracketsConfig.length; j++) {
        open[j] = bracketsConfig[j][0];
        close[j] = bracketsConfig[j][1];
    }

    for (let i = 0; i < chars.length; i++) {
       openIndex = open.indexOf(chars[i]);

       if (openIndex !== -1) {
           stack.push(openIndex);
           continue;
       }

       closeIndex = close.indexOf(chars[i]);

       if (closeIndex !== -1) {
           openIndex = stack.pop();
           
           if (closeIndex !== openIndex) {
               return false;
           }
       }
    }

    return (stack.length === 0);
    //return 'Open = ' + open + '\nClose = ' + close;
}

check('()', [['(', ')']]); // -> true
check('((()))()', [['(', ')']]); // -> true
check('())(', [['(', ')']]) // -> false
check('([{}])', [['(', ')'], ['[', ']'], ['{', '}']]) // -> true
check('[(])', [['(', ')'], ['[', ']']]) // -> false
check('[]()', [['(', ')'], ['[', ']']]) // -> true
check('[]()(', [['(', ')'], ['[', ']']]) // -> false

//check('||', [['|', '|']]) // -> true
// check('|()|', [['(', ')'], ['|', '|']]) // -> true
// check('|(|)', [['(', ')'], ['|', '|']]) // -> false
// check('|()|(||)||', [['(', ')'], ['|', '|']]) // -> true

